#!/usr/bin/env python3
"""
Simple test script to verify the policy modification logic works correctly.
This simulates what the Lambda function will do when it processes Access Analyzer findings.
"""

import json
import re
from datetime import datetime

def simulate_policy_modification():
    """Simulate the policy modification that would happen in the Lambda"""
    
    # Original policies.tf content (simplified version of yours)
    original_content = '''resource "aws_iam_user_policy" "alice_analyst_policy" {
  name = "alice-analyst-test-policy"
  user = aws_iam_user.alice_analyst_test.name

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Sid      = "OverlyPermissiveReadAndWrite",
        Effect   = "Allow",
        Action   = [
          "s3:*",
          "athena:*", 
          "glue:*",
          "cloudwatch:Get*",
          "cloudwatch:PutMetricData",
          "dynamodb:Scan",
          "kms:Decrypt",
          "iam:List*",
          "iam:Get*",
          "lambda:InvokeFunction",
          "sts:AssumeRole"
        ],
        Resource = "*"
      }
    ]
  })
}'''

    print("=== ORIGINAL POLICY ===")
    print(original_content)
    print("\n" + "="*50 + "\n")

    # Simulate what the Lambda function will do
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")
    header_comment = f"""# MODIFIED BY LEAST PRIVILEGE OPTIMIZER - {timestamp}
# Based on AWS IAM Access Analyzer findings
# All permissions were found to be unused and have been removed for least privilege

"""
    
    # Find and replace the alice_analyst_policy resource
    alice_policy_pattern = r'resource\s+"aws_iam_user_policy"\s+"alice_analyst_policy"\s*\{[^}]*policy\s*=\s*jsonencode\s*\([^)]*\)[^}]*\}'
    
    # Create the new minimal policy - essentially empty since no permissions are needed
    new_policy_block = '''resource "aws_iam_user_policy" "alice_analyst_policy" {
  name = "alice-analyst-test-policy"
  user = aws_iam_user.alice_analyst_test.name

  # LEAST PRIVILEGE POLICY: All previous permissions were unused according to Access Analyzer
  # This policy grants no permissions - only add what is actually needed based on real usage
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = []
  })
}'''
    
    # Replace the policy block
    modified_content = re.sub(
        alice_policy_pattern,
        new_policy_block,
        original_content,
        flags=re.DOTALL
    )
    
    # Add header comment at the beginning
    modified_content = header_comment + modified_content
    
    # Add summary comment
    recommendation_comment = """
# RECOMMENDATION SUMMARY for aws_iam_user.alice_analyst_test:
# - Finding ID: simulated-finding-123
# - Unused actions: 11 permissions removed
# - All permissions removed as they were unused  
# - Policy now has empty statements array (grants no permissions)

"""
    
    modified_content = modified_content.replace(header_comment, header_comment + recommendation_comment)
    
    print("=== MODIFIED POLICY ===")
    print(modified_content)
    print("\n" + "="*50 + "\n")
    
    # Verify the change was made
    if modified_content != original_content:
        print("‚úÖ SUCCESS: Policy was successfully modified!")
        print("üìù Changes made:")
        print("   - Removed all unused permissions (s3:*, athena:*, glue:*, etc.)")
        print("   - Policy now has empty Statement array")
        print("   - Added explanatory comments")
        print("   - This represents a least-privilege policy based on actual usage")
    else:
        print("‚ùå ERROR: No changes were made to the policy")
    
    return modified_content

def simulate_pr_description():
    """Show what the PR description will look like"""
    
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")
    
    pr_body = f"""## üîí Least Privilege IAM Policy Update

**Generated by:** AWS IAM Access Analyzer Integration  
**Timestamp:** {timestamp}

### Summary
This PR removes unused IAM permissions based on AWS Access Analyzer findings to implement least privilege access.

### Changes Made

#### aws_iam_user.alice_analyst_test
- **Finding ID:** `simulated-finding-123`
- **Resource:** `alice-analyst-test`
- **Unused Actions:** 11 permissions removed
- **Confidence:** high

**Action Taken:** All permissions were found to be unused and have been removed. The policy now grants minimal permissions only.

### What's Changed
- Modified `policies.tf` to remove all unused permissions
- Replaced overly permissive policies with minimal least-privilege policies
- Added documentation comments explaining the changes

### Next Steps
1. ‚úÖ Review the changes carefully
2. ‚úÖ Test in a development environment first
3. ‚úÖ Ensure applications still function with reduced permissions
4. ‚úÖ Monitor for any access denied errors after deployment
5. ‚úÖ Add back only the specific permissions that are actually needed

### Safety Notes
‚ö†Ô∏è **Important:** This change removes many permissions. Please test thoroughly before merging.

The new policy grants minimal permissions only. If your applications need specific permissions, you'll need to add them back based on actual usage requirements.

---
*This PR was automatically generated by the Least Privilege Optimizer based on AWS IAM Access Analyzer findings.*
"""

    print("=== GITHUB PR DESCRIPTION ===")
    print(pr_body)

if __name__ == "__main__":
    print("üß™ Testing Policy Modification Logic")
    print("="*60)
    
    # Test the policy modification
    modified_policy = simulate_policy_modification()
    
    print("\nüîç Testing PR Description Generation")
    print("="*60)
    
    # Test the PR description 
    simulate_pr_description()
    
    print("\n‚ú® Test Complete!")
    print("This demonstrates what the Lambda function will do when it processes")
    print("Access Analyzer findings for your alice-analyst-test user policy.")